---
layout: post
title: 추상골격구현클래스
date: 2019-02-08
description: 설명
img: post-2.jpg
tags: Effective-Java
author: luis
---
####추상골격구현클래스 (Abstract Skeletal Implementation Class)
인터페이스의 장점과 추상 클래스의 장점을 결합

자판기를 개발한다고 치자.
음료자판기, 커피자판기, 라면자판기 등등 여러 타입이 있다.
그럼 자판기라는 인터페이스를 만들겠지.
그리고 구현체를 만들겠지.

```Java
package com.example.skeletal;
public interface Ivending {
    void start();
    void chooseProduct();
    void stop();
    void process();
}
package com.example.skeletal;
public class CandyVending implements Ivending {
    @Override
    public void start() {
        System.out.println("Start Vending machine");
    }
    @Override
    public void chooseProduct() {
        System.out.println("Produce diiferent candies");
        System.out.println("Choose a type of candy");
        System.out.println("pay for candy");
        System.out.println("collect candy");
    }
    @Override
    public void stop() {
        System.out.println("Stop Vending machine");
    }
    @Override
    public void process() {
        start();
        chooseProduct();
        stop();
    }
}
package com.example.skeletal;
public class DrinkVending implements Ivending {
    @Override
    public void start() {
        System.out.println("Start Vending machine");
    }
    @Override
    public void chooseProduct() {
        System.out.println("Produce diiferent soft drinks");
        System.out.println("Choose a type of soft drinks");
        System.out.println("pay for drinks");
        System.out.println("collect drinks");
    }
    @Override
    public void stop() {
        System.out.println("stop Vending machine");
    }
    @Override
    public void process() {
        start();
        chooseProduct();
        stop();
    }
}
package com.example.skeletal;
public class VendingManager {
    public static void main(String[] args) {
        Ivending candy = new CandyVending();
        Ivending drink = new DrinkVending();
        candy.process();
        drink.process();
    }
}
/**
Output :
Start Vending machine
Produce diiferent candies
Choose a type of candy
pay for candy
collect candy
Stop Vending machine
 *********************
Start Vending machine
Produce diiferent soft drinks
Choose a type of soft drinks
pay for drinks
collect drinks
stop Vending machine
**/
```

start(),stop(),process()가 중복된다.
그렇다고 유틸리티클래스에 코드를 넣으면 SRP가 깨지게 된다.

이처럼 인터페이스는 중복코드를 만들 가능성이 있다.

그래서 추상클래스를 이용해보자.

```Java
package com.example.skeletal;
public abstract class AbstractVending {
    public void start()
    {
        System.out.println("Start Vending machine");
    }
    public abstract void chooseProduct();
    public void stop()
    {
        System.out.println("Stop Vending machine");
    }
    public void process()
    {
        start();
        chooseProduct();
        stop();
    }
}
package com.example.skeletal;
public class CandyVending extends AbstractVending {
    @Override
    public void chooseProduct() {
        System.out.println("Produce diiferent candies");
        System.out.println("Choose a type of candy");
        System.out.println("pay for candy");
        System.out.println("collect candy");
    }
}
package com.example.skeletal;
public class DrinkVending extends AbstractVending {
    @Override
    public void chooseProduct() {
        System.out.println("Produce diiferent soft drinks");
        System.out.println("Choose a type of soft drinks");
        System.out.println("pay for drinks");
        System.out.println("collect drinks");
    }
}
package com.example.skeletal;
public class VendingManager {
    public static void main(String[] args) {
        AbstractVending candy =  new CandyVending();
        AbstractVending drink =  new DrinkVending();
        candy.process();
        System.out.println("*********************");
        drink.process();
    }
}
```
중복은 제거 했지만 구현클래스들은 다른 상속을 포기해야한다.

####Abstract Interface or Skeletal Implementation
1. 우선 인터페이스 만들자
2. 그 인터페이스를 구현하는 추상클래스를 만들어서 공통 메서드를 구현해라.
3. 구현 클래스에 추상클래스를 상속한 private 이너클래스 (Delegator패턴)를 만들어라. 그리고 그 클래스를 변수로 가지고 포워딩해라.

```Java
package com.example.skeletal;
public interface Ivending {
void start();
void chooseProduct();
void stop();
void process();
}
package com.example.skeletal;
public class VendingService {
public void service()
{
System.out.println("Clean the vending machine");
}
}
package com.example.skeletal;
public abstract class AbstractVending implements Ivending {
    public void start()
    {
        System.out.println("Start Vending machine");
    }
    public void stop()
    {
        System.out.println("Stop Vending machine");
    }
    public void process()
    {
        start();
        chooseProduct();
        stop();
    }
}
package com.example.skeletal;
public class CandyVending  implements Ivending {
    private class AbstractVendingDelegator extends AbstractVending
    {
    @Override
    public void chooseProduct() {
        System.out.println("Produce diiferent candies");
        System.out.println("Choose a type of candy");
        System.out.println("pay for candy");
        System.out.println("collect candy");
    }
}
AbstractVendingDelegator delegator = new AbstractVendingDelegator();
    @Override
    public void start() {
        delegator.start();
    }
    @Override
    public void chooseProduct() {
        delegator.chooseProduct();
    }
    @Override
    public void stop() {
        delegator.stop();
    }
    @Override
    public void process() {
        delegator.process();
    }
}
package com.example.skeletal;
package com.example.skeletal;
public class DrinkVending extends VendingService  implements Ivending {
    private class AbstractVendingDelegator extends AbstractVending
    {
        @Override
        public void chooseProduct() {
            System.out.println("Produce diiferent soft drinks");
            System.out.println("Choose a type of soft drinks");
            System.out.println("pay for drinks");
            System.out.println("collect drinks");
        }
    }
    AbstractVendingDelegator delegator = new AbstractVendingDelegator();
    @Override
    public void start() {
        delegator.start();
    }
    @Override
    public void chooseProduct() {
        delegator.chooseProduct();
    }
    @Override
    public void stop() {
        delegator.stop();
    }
    @Override
    public void process() {
        delegator.process();
    }
}
package com.example.skeletal;
public class VendingManager {
    public static void main(String[] args) {
        Ivending candy = new CandyVending();
        Ivending drink = new DrinkVending();
        candy.process();
        System.out.println("*********************");
        drink.process();
        if(drink instanceof VendingService)
        {
            VendingService vs = (VendingService)drink;
            vs.service();
        }
    }
}
/**
Start Vending machine
Produce diiferent candies
Choose a type of candy
pay for candy
collect candy
Stop Vending machine
*********************
Start Vending machine
Produce diiferent soft drinks
Choose a type of soft drinks
pay for drinks
collect drinks
Stop Vending machine
Clean the vending machine
**/
```

즉, 인터페이스로 인한 중복을 추상클래스로 지우고 Delegator패턴으로 추상클래스 상속에 대한 단점을 지울수 있다.
