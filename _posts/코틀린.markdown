# 왜 자바가 있는데 코틀린 해야하지?

**실용성 가독성 안전성 유지보수성**

자바로 개발 했던 곳에 코틀린으로 **100%**호환



오라클 vs 구글 -> 오라클 승!! 

오라클 자바 업데이트 하려면 구독료 내라 

구독료 내면 되지만 무료 오픈소스인 코틀린



# 코틀린 목적 및 철학

자바코드 남겨두고 그 위에 새로운 언어 쓰고 싶은 마음에서 시작.. 

서버,데스크탑,모바일 모든 환경에서 다 쓰고자 했다. 

모든 언어를 위한 상업용 언어로 개발 시작.

연구를 위한 언어가 아니다. 

이미 인증된 설계 철학에 의존. (OOP, FP)

==실용성에 초점.== 항상 도구의 활용을 염두에 두고 설계됨. 인텔리제이 아이디어의 개발과 컴파일러의 개발이 맞물려 있음. 

==높은 가독성== 코틀린은 프로그래머가 의미없는 코딩 (보일러플레이트)을 줄이기 위해 노력함. 번거로운 코드는 묵시적으로 제공 (게터,세터등등). 의도파악에 쉬움. 

==안전성== JVM의 안전성을 기반으로 더 나아가 NPE를 런타임에서 발생하지 않으며 클래스 타입 검사와 캐스팅을 동시에 진행할 수 있음 

==자바와 완벽 호환== 



#코틀린 개요 

- ==정적언어 + 타입추론== => <u>성능과 정확성 간결한 소스코드</u> 
- 객체지향과 *함수형프로그래밍* 모두 지원
  - 코틀린은 일급시민함수 지원, 람다식(코드블록쉽게정의), 데이터 클래스는 불변객체 간편하게 만들수 있는 구문 제공, 표준라이브러리에서 객체와 컬렉션을 함수형 스타일로 다룰 수 있는 API 제공 
    - 함수형 프로그래밍 : `일급시민함수(변수로가능)` 로 높은 추상화 가능 ( 공통되는 부분 함수로 뽑고 세부사항의 차이는 함수 인자로 전달), `함수 안에 불변 객체`를 통해 thread-safety (복잡한 동기화 불필요) ,  `pure function` (입력-출력 같고 다른 객체 상태 변경하지 않으며 함수 외부환경에 상호작용하지 않음) 으로 side effect 감소  
- 기존 ==자바 프레임워크 완벽 지원==. html생성기 영속화등의 일반적인 작업을 위한 새로운 도구 제공. 
- 오픈소스이며 ==주요IDE와 빌드 시스템을 완전 지원== 
- ==실용주의 언어. 자바와 완벽 대체 가능==
- 대화형 셀

* [코틀린 클라우드 코딩](try.kotlinlang.org)
* [코틀린튜토리얼](http://kotlinlang.org/docs/tutorials/)



- 코틀린 백엔드 준비 중...  (JVM 대체..)
- 코틀린 네이티브 준비 중... iOS, Android, MacOS 모두 코틀린으로 개발 가능하게. 



# 코드 맛보기

```kotlin
@Service
class TrackMetaService(private val trackAuthorityService: TrackAuthorityService, private val deliveryApiClient: DeliveryApiClient, private val memberAdultAuthorityService: MemberAdultAuthorityService, private val hanoverCacheManager: HanoverCacheManager, private val applicationContext: ApplicationContext, private val hanoverSecondCacheManager: HanoverSecondCacheManager, private val songApiClient: SongApiClient) {
    private val logger = LoggerFactory.getLogger(TrackMetaService::class.java!!)
    private var self: TrackMetaService? = null

    @PostConstruct
    private fun init() {
        self = applicationContext.getBean("trackMetaService") as TrackMetaService
    }

    /**
     * @throws com.kakao.hanover.i14y.I14yException api 연동 문제
     * @throws MelonSystemCheckTimeException        멜론 시스템 점검 중
     * @throws ResponseBodyException                응답값 이상
     * @throws NoSuchTrackException                 트랙을 찾을 수 없음
     */
    @Cacheable(value = "dto.v11.TrackSimpleDto", key = "#trackId.toString()", unless = "#result == null")
    fun getTrackSimpleDto(trackId: Long?): TrackSimpleDto? {
        val trackDto = self!!.getTrackDto(trackId!!)
        return convertToTrackSimpleDto(trackDto)
    }

    private fun convertToTrackSimpleDto(trackDto: TrackDto): TrackSimpleDto {
        val trackSimpleDto = com.kakao.hanover.dto.v11.TrackSimpleDto()
        trackSimpleDto.set(trackDto)
        return trackSimpleDto
    }

    fun getTrackSimpleDtoList(trackIdList: List<Long>): List<TrackSimpleDto> {
        val trackSimpleDtoList = ArrayList<TrackSimpleDto>()
        for (trackId in trackIdList) {
            val trackSimpleDto = getTrackSimpleDto(trackId)
            if (trackSimpleDto != null) {
                trackSimpleDtoList.add(trackSimpleDto)
            }
        }
        return trackSimpleDtoList
    }

    /**
     * @throws com.kakao.hanover.i14y.I14yException api 연동 문제
     * @throws MelonSystemCheckTimeException        멜론 시스템 점검 중
     * @throws ResponseBodyException                응답값 이상
     * @throws NoSuchTrackException                 트랙을 찾을 수 없음
     */
    @Cacheable(value = "dto.v11.TrackDto", key = "#trackId.toString()", unless = "#result == null")
    fun getTrackDto(trackId: Long): TrackDto {
        val songInfoResponse = songApiClient.getSongInfo(HanoverContext.getCpKey(), HanoverContext.getCpId(), HanoverContext.getUserAgent(), trackId)

        if (songInfoResponse.isPresent) {
            return convertToTrackDtoWithCheckBgm(songInfoResponse.get())
        }

        logger.info("(SongInfo Api) track is not found : {}", trackId)
        try {
            return getTrackDtoFromContentInfoApi(trackId)
        } catch (e: MelonApiStatusCodeException) {
            throw NoSuchTrackException(e)
        }

    }
```



---



# 코틀린 문법 기초 

##자바와 차이점

``` kotlin
fun main(args: Array<String>) {
    println("Hello, world!")
}
```

꼭 클래스 안에 함수 넣을 필요 없음 , 최상위 수준에 정의 가능 

`배열도 클래스와 마찬가지` 배열에 관한 문법 없음 

println 표준 라이브러리 간결하게 쓸수 있게 래퍼 제공

`세미콜론 붙이지 않아도 됨` 



> 자바에서는 모든 제어구조가 문이지만 코틀린은 `루프제외하고 대부분 식` 
>
> 식은 값을 만들어 내며 다른 식의 하위 요소로 계산에 참여 가능
>
> 자바에서 `대입(assign, =)`은 식이었으나 코틀린에서는 문이 되었다. 따라서 아래와 같은 차이가 있다.
>
> ```java
> /* 자바 */
> 
> /* line = bufReader.readLine() 으로 할당을 하면서
> 바로 != null로 비교 가능하다 */
> while((line = bufReader.readLine()) != null) {
>     ...
> }
> ```
>
> ```kotlin
> /* 코틀린 */
> 
> /* 대입(=)이 문이므로 아래 while 조건문 안의
> (line = bufReader.readLine()) 자체가 컴파일 에러다 */
> while((line = bufReader.readLine()) != null) { // <-- 이 문장은 오류다
>     ...
> }
> ```

##식이 본문인 함수 

```kotlin
/* 위 함수를 간소화 하면 아래와 같다 */
fun main(a: Int, b: Int): Int = if (a > b) a else b

/* 위 간소화 된 함수에서 리턴 타입을 제거하고 한 번 더 간소화 할 수 있다 */
fun main(a: Int, b: Int) = if (a > b) a else b
```

- `식이 본문인 함수`는 `타입 추론`을 통해 리턴 타입을 컴파일러가 결정 가능하므로 리턴 타입 생략이 가능하다.
- 등호와 식으로 이루어진 함수를 `식이 본문인 함수`라고 부른다.

##블럭이 본문인 함수

```kotlin
fun max(a: Int, b: Int): Int {
    return if (a > b) a else b
}
```

- 함수의 본문을 중괄호로 감싸면 `블록이 본문인 함수`라고 부르고, 



## 변수

초기화를 하면 타입추론이 가능하다. 선언만 하면 타입 지정 해야한다. 

- `val(value에서 따옴)` - 변경 불가능(immutable) 참조를 저장하는 변수. 초기화 후에는 재대입이 불가능. 자바로 말하면 `final` 변수에 해당
- `var(variable에서 따옴)` - 변경 가능(mutable) 참조. 값은 바뀔 수 있다. 자바의 일반 변수에 해당
- 코틀린에서는 가능한 `val` 키워드를 사용해 불변 변수 사용을 권장. 나중에 꼭 필요한 경우에만 `var`로 변경하라
- `val` 변수는 정확히 한 번만 초기화 되어야 한다. 조건에 따라 다른 여러 값으로 초기화 가능하다. 아래 예제 참고.

```kotlin
val message: String
if (isSuccess()) {
    message = "Success"
}
else {
    message = "Failed"
}

```

- `val` 변수의 주의할 사항은 **참조 자체가 불변**이라는 점이다. **참조가 가르키는 객체 내부의 값은 변경 가능**하다. 아래 예 참고

```kotlin
val lang = arrayListOf("Java") /* 불변 참조를 선언 */
lang.add("Kotlin")             /* 참조가 아닌 객체 내부를 변경하므로 에러 아님 */
lang = arrayListOf("C")        /* 에러!! 참조를 변경 */
```

- `var` 변수는 값 변경은 가능하나, 초기화 시점의 변수 타입은 고정이다. 따라서 아래 예제는 오류를 발생한다.

```kotlin
var answer = 42
answer = "no answer"  /* 컴파일 에러!! Type mismatch */
```



## 문자열템플릿

```kotlin
fun main(args: Array<String>) {
    val name = if(args.size > 0) args[0] else "Kotlin"
    println("Hello, $name")
    println("Hello, ${name}")  /* 중괄호 사용 */
}
```

- 코틀린은 문자열 템플릿(String Template)을 지원한다. 아래 예제에서 println 안의 `$name`이 문자열 템플릿이다. 가능한 문자열 템플릿은 중괄호로 묶어 `${name}`처럼 사용하는 것이 좋다. 중괄호를 안 하고 한글과 같이 쓰면 컴파일할때 unresolved reference오류가 난다. 



## 클래스와 프로퍼티

```java
/* 자바 */
public class Person {
    private final String name;

    public Person(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }
}
```

```kotlin
/* 코틀린 */
class Person(val name: String)
// 이런 유형의 데이터만 있는 클래스를 값 객체라고 함 
```

- 확실히 줄어든 코드량 
- public 클래스가 기본



```kotlin
/* 클래스 안에서 변경 가능한 프로퍼티 선언 */
class Person (
    val nane: String,        /* 읽기전용 프로퍼티 */ 비공개필드,공개게터생성
    var isMarried: Boolean   /* 쓰기 가능한 프로퍼티 */ 비공개필드,공개세터,공개게터
)

>>> val Person("Bob", true)  new하지 않는다
>>> println(person.name)
Bob
>>> println(person.isMarried)
true
```

- 클래스라는 개념의 목적은 `캡슐화` 데이터를 다루는 코드를 한 주체 아래 가두는 것 
- 멤버 필드를 비공개로 하고 클라이언트가 쓸 통로를 만들어 허용한다. 
- 자바에서는 필드와 접근자를 한데 묶어 `프로퍼티`라고 함 
- 코틀린은 프로퍼티를 언어 기본으로 제공하여 자바의 필드와 접근자 메소드를 완전 대신 
- 프로퍼티는 val, var 둘다 가능
- new 키워드를 쓰지 않는다
- 프로퍼티 이름이 is로 시작하면 게터는 is- 그대로 쓴다 

```kotlin
class Rectangle(val height: Int, val width: Int) {
    val isSquare: Boolean
        get() { /* <-- 프로퍼티 게터 선언 */
            return height == width
        }
        =>> get() = height == width
}

>>> val rect = Rectangle(41, 43)
>>> println(rect.isSquare)
false
```

- 커스텀 접근자를 쓴다고 성능상 차이는 없다 가독성 차이뿐

### 패키지 

- 함수와 클래스 임포트에 차이가 없다 
- 코틀린에서는 여러 클래스를 한 파일에 넣을수 있고 파일 이름도 마음대로 지정가능해서 디스크상의 어느 디렉토리에 소스코드 파일을 위치 시키든 상관 없음
- 자바와 호환을 위해 자바방식을 따라 디렉토리와 패키지 구조를 같게 하는게 좋다. 하지만 한 파일에 여러클래스 넣는것 주저 하지 말자 

## enum과 when

###enum

- 자바는 enum 코틀린은 `enum class` 키워드.
  - 코틀린에서 enum은 소프트 키워드라서 class앞에서만 키워드 역할이라 다른곳에서 네이밍 가능 

```kotlin
/* 간단한 enum 선언 */
enum class Color {
    RED, ORANGE, YELLOW, GREEN, BLUE, INDIGO, VIOLET
}

/* 프로퍼티와 메소드가 있는 enum 선언 */
enum class Color(val r: Int, val g: Int, val b: Int) {
    RED(255, 0, 0),
    ORANGE(255, 165, 0),
    YELLOW(255, 255, 0),
    GREEN(0, 255, 0),
    BLUE(0, 0, 255),
    INDIGO(75, 0, 130),
    VIOLET(238, 130, 238);  /* 세미콜론 사용 필수 */

    fun rgb() = (r * 256 + g) * 256 + b
}
```

### when

- when도 `식`이다 
- break없음
- `,`로 여러값 사용가능 
- 상수뿐만 아니라 임의의 `객체도 분기 조건`으로 가능
- 분기 조건 없이 이용가능

```kotlin
/* 간단한 when 에제 */
fun getMnemonic(color: Color) =
    when(color) {
        Color.RED -> "Richard"
        Color.ORANGE -> "Of"
        Color.YELLOW -> "York"
        Color.GREEN -> "Gave"
        Color.BLUE -> "Battle"
        Color.INDIGO -> "In"
        Color.VIOLET -> "Vain"
    }

>>> println(getMnemonic(Color.BLUE))
Battle


/* 한 when 분기 안에 여러 값 사용 */
fun getWarmth(color: Color) =
    when(color) {
        Color.RED,
        Color.ORANGE,
        Color.YELLOW -> "warm"
        Color.GREEN -> "neutral"
        Color.BLUE,
        Color.INDIGI
        Color.VIOLET -> "cold"
    }

>>> println(getWarmth(Color.ORANGE))
warm
```

###스마트캐스트로 when

```kotlin
interface Expr
class Num(val value: Int) : Expr
class Sum(val left:Expr, val right:Expr) : Expr

fun eval(e : Expr): Int =
    when(e) {
        is Num -> e.value /* is에 의해  e가 자동으로 Num으로 캐스팅 된다 */
        is Sum -> eval(e.right) + eval(e.left)
        else -> throw IllegalArgumentException("Unknown expression")
    }
```



## 루프

- while은 자바와 동일 
- for은 자바의 for-each형태만 존재 `for<아이템> in<원소들>` 

- 코틀린에서는 `범위(range)`를 사용한다. 예) `val oneToTen = 1..10`

```kotlin
fun fizzByzz(i: Int) = when {
    i % 15 == 0 -> "FizzBuzz"
    i % 3 == 0 -> "Fizz"
    i % 5 == 0 -> "Buzz"
    else -> "$i "
}

>>> for (i in 1..100) {
...     print(fizzBuzz(i))
... }
1 2 Fizz 4 Buzz Fizz 7 ...


/* 증가 값을 갖고 범위 이터레이션하기 */
for (i in 100 downTo 1 step 2) {
    print(fizzBuzz(i))
}
```

### 맵에 대한 이터레이션

```kotlin
/* 맵 이터레이션 */
val binaryReps = TreeMap<Char, String>()

for (c in 'A'..'F') {
    val binary = Integer.toBinaryString(c.toInt())
    binaryReps[c] = binary
}

for ((letter, binary) in binaryReps) {
    println("$letter = $binary")
}

/* 출력 */
A = 1000001
B = 1000010
C = 1000011
...


/* 컬렉션 이터레이션 */
val list = arrayListOf("10", "11", "1001")
for ((index, element) in list.withIndex()) {
    println("$index: $element")
}

/* 출력 */
0: 10
1: 11
2: 1001
```

### in으로 컬렉션 범위의 원소 검사 

```kotlin
fun isLetter(c: Char) = c in 'a'..'z' || c in 'A'..'Z'
fun isNotDigit(c: Char) = c !in '0'..'9'

>>> println(isLetter('q'))
true
>>> println(isNotDigit('x'))
true
```

## 예외처리

- 코트린의 `throw`는 `if`와 마찬가지로 `식`이다. 다만 `중괄호 필수`
- 자바와 달리 `new` 키워드를 붙일 필요가 없다.
- `unchecked exception`만 존재해서 예외에 있어서 잡지 않아도 된다 
- throws절이 없다. 

```kotlin
if (percentage !in 0..100) {
    throw IllegalArgumentException(
        "A percentage value must be be between 0 and 100: $percentage")
}
```



# 함수

```kotlin
hashMapOf(1 to "one", 7 to "seven", 53 to "fifty-three")
```

여기서 `to` 는 키워드가 아니라 `함수` 

- 코틀린은 자바의 컬렉션에다가 더 많은 기능을 제공 
- <u>이 많은 기능을 코틀린은 함수를 통해 해결한다</u> 

```kotlin
val set = hashSetOf(1, 7, 53)     /* 집합 */
val list = arrayListOf(1, 7, 53)  /* 리스트 */
val map = hashMapOf(1 to "one", 7 to "seven", 53 to "fifty-three") /* 맵 */

/* 코틀린에서 사용하는 컬렉션은 자바의 컬렉션이다. */
>>> println(set.javaClass)
class java.util.HashSet
>>> println(list.javaClass)
class java.util.ArrayList
>>> println(map.javaClass)
class java.util.HashMap

/* 자바에는 없는 컬렉션 기능을 제공한다. */
>>> val strings = listOf("first", "second", "fourteenth")
>>> println(string.last()) /* 마지막 요소를 반환 */
fourteenth

>>> val numbers = setOf(1, 14, 2)
>>> println(numbers.max()) /* 최대값 반환 */
14
```

```kotlin
fun <T> joinToString(collection: Collection<T>,
                    separator: String,
                    prefix: String,
                    prefix: String
) : String {
    val result = StringBuilder(prefix)
    for ((index, element) in collection.withIndex()) {
        if (index > 0) result.append(separator)
        result.append(element)
    }

    result.append(postfix)
    return result.toString()
}

>>> val list = listOf(1, 2, 3)
>>> println(joinToString(list, "; ", "(", ")"))
(1; 2; 3)
```

- 위 함수를 `joinToString(collection, " ", " ", ".")`와 같이 호출한다고 하면 각 문자열이 무슨 역할을 하는지 구분이 모호하다.
- 자바에서는 아래와 같이 코딩하기도 한다.

```Java
/* 자바 */
joinToString(collection, /* seprarator */ " ", /* prefix */ " ", /* postfix */ ".");
```

- 코틀린에서는 다음과 같이 표현 할 수 있다.

```kotlin
/* 코틀린 */
joinToString(collection, separator = " ", prefix = " ", postfix = ".")
```

- 코틀린에서는 함수의 파라미터에 디폴트 값을 지정할 수 있다.

```kotlin
fun <T> joinToString(collection: Collection<T>,
                    separator: String = ", ", /* 디폴트 값 지정 */
                    prefix: String = "",
                    prefix: String = ""
) : String

/* 디폴트 값 선언으로 아래와 같이 파라미터를 생략하여 호출 가능하다 */
>>> joinToString(list)
1, 2, 3
>>> joinToString(list, "; ")
1; 2; 3

/* 인자의 이름을 붙여 순서와 관계 없이 호출할 수 있다. */
>> joinToString(list, postfix = ";", prefix = "#")
# 1, 2, 3;
```

- 자바에서는 디폴트 파라미터 개념이 없어, 코틀린 함수를 자바에서 호출하는 경우에는 모든 인자를 명시해야 한다.
- 또는 `@JvmOverloads` 애노테이션을 추가하게 되면 코틀린 컴파일러가 자동으로 오버로딩한 자바 메소드를 생성 해준다.

## 정적인 유틸클래스 없애기 : 최상위 함수와 프로퍼티

- 코틀린은 클래스 밖에 함수를 위치 시키는 것이 가능하다. 자바는 클래스 안에 모든 메소드를 선언해야 한다. 그 결과 다양한 정적 메소드를 모아두는 역할만 담당해서 상태나 인스턴스메서드가 없는 클래스가 생겨난다. ex) Collections, Util
- joinToString 함수를 strings 패키지에 넣는 방법은 아래와 같다.

```kotlin
/* join.kt */
package strings

fun joinToString(...): String { ... }
```

- 위 코틀린 코드를 자바 코드 변환하면 아래와 같다.

```Java
package strings;

pulbic class JoinKt { /* 코틀린 파일명으로 클래스 이름 생성 */
    public static String joinToString(...) {
        ...
    }
}
```

#### 최상위 프로퍼티

- 함수와 마찬가지로 프로퍼티도 최상위 수준에 놓을 수 있다.

```kotlin
var opCount = 0

fun performOperation() {
    opCount++
    // ...
}
```

- 기본적인 최상위 프로퍼티도 게터와 세터로 접근해야 한다.
- 상수처럼 보이는 값의 경우는 `const` 변경자를 추가하면 자바의 `public static final` 필드로 컴파일 해준다.

```kotlin
const val UNIX_LIN_SEPARATOR = "\n"
```



## 메서드를 다른 클래스에 추가 : 확장함수와 확장프로퍼티

- 확장 함수Extension function는 기존 자바 API를 재작성하지 않고 기능을 추가할 수 있는 것을 말한다.

```kotlin
/* 확장 함수를 통해 문자열의 마지막 문자를 돌려주는 메소드 추가 */
package strings

fun String.lastChar(): Char = this.get(this.length - 1)
```

- 확장 함수를 만드려면 추가하려는 함수 이름 앞에 그 함수가 확장할 클래스의 이름을 덧붙이기만 하면 된다.
- 클래스 이름을 `수신 객체 타입`receiver type, 확장 함수가 호출되는 대상이 되는 값을 `수식 객체`receiver object 라고 한다.

```kotlin
fun String.lastChar(): Char = this.get(this.length - 1)
       ↑                        ↑        ↑
   수식 객체 타입                수신객체   수신객체


/* 호출은 일반 클래스 멤버를 호출하는 구문과 동일하다 */
>>> println("kotlin".lastChar())
n
```

- 함수 본문에서 this 생략이 가능하다.

```kotlin
package strings

/* 확장 함수 본문에는 this를 생략할 수 있다. */
fun String.lastChar(): Char = get(length - 1)
```

- 확장 함수는 기존 메소드 내부의 캡슐화를 깨지 않는다.
- 기존 메소드의 `private`나 `protected` 멤버를 사용할 수 없다.



- 확장 함수를 정의했다고 해도 자동으로 프로젝트 안의 모든 소스코드에서 그 함수를 사용할 수 있지 않다.
- 임포트는 아래와 같이 한다.

```kotlin
import strings.lastChar
val c = "kotlin".lastChar()
import strings.*
val c = "kotlin".lastChar()
import strings.lastChar as last
val c = "kotlin".last()
```

- 확장 함수는, 자바에서는 전체 패키지 경로를 사용하여 호출 가능 하지만, 코틀린의 경우는 반드시 `import`를 사용해야 하며, 다른 패키지에 같은 이름의 함수가 있는 경우는 `as`를 사용하여 함수 이름을 바꾸는 것 유일한 방법이다.



##확장 함수로 유틸리티 함수 정의

```kotlin
 /* joinToString 함수의 최종 버전 */
 
 fun <T> Collection<T>.joinToString(
     separator: String = ", ",
     prefix: String = "",
     postfix: String = ""
 ): String {
     val result = StringBuilder(prefix)

     for ((index, element) in this.withIndex()) {
        if (index > 0) result.append(separator)
        result.append(element)
     }

     result.append(postfix)
     return result.toString()
 }

 >>> val list = listOf(1, 2, 3)
 >>> println(list.joinToString(separator = "; ", prefix = "(", postfix = ")"))
 (1; 2; 3)

 >>> val list2 = arrayListOf(1, 2, 3)
 >>> println(list.joinToString(" "))
 1 2 3
```

- 특정 타입에 대한 수신 객체 타입을 지정할 수 있다. 문자열 컬렉션에 대해서만 호출할 수 있는 join 함수는 아래와 같다.

```kotlin
 fun Collection<String>.join(
     separator: String = ", ",
     prefix: String = "",
     postfix: String = ""
 ) = joinToString(separator, prefix, postfix)

 >>> println(listOf("one", "two", "eight").join(" "))
 one two eight

/* 정수 타입의 컬렉션에 대해서는 오류가 발생한다. */
 >>> listOf(1, 2, 8).join()
 Error: Type mismatch: inferred type is List<Int> but Collection<String>
```

- 확장 함수는 오버라이드 불가능하다.

```kotlin
 /* 일반적인 오버라이드를 구현한 코드 */
 open class View {
    open fun click() = println("View clicked")
}

class Button: View() {
    override fun click() = println("Button clicked")
}

>>> val view: View = Button()
>>> view.click()
Button clicked
 /* 확장 함수가 오버라이드 불가능함을 보여주는 코드 */
 fun View.showOff() = println("I'm a view!")
 fun Button.showOff() = println("I'm a button")
 
 >>> val view: View = Button()
 >>> view.showOff()
 I'm a view!
```

## 확장 프로퍼티

- 확장 프로퍼티를 사용하면 기존 클래스 객체에 대한 프로퍼티 형식의 구문으로 사용할 수 있는 API를 추가 할 수 있다.
- 하지만 기존 클래스에 필드를 추가할 방법이 없으므로 상태 저장은 불가능하다.

```kotlin
 /* 확장 프로퍼티 선언하기 */
 val String.lastChar: Char
    get() = get(length -1)
 /* 변경 가능한 확장 프로퍼티 선언하기 */
var StringBuilder.lastChar: Char
    get() = get(length - 1)  /* 프로퍼티 게터 */
    set(value: Char) { this.setCharAt(length - 1, value) }
    
>>> println("Kotlin".lastChar)
n
>>> val sb = StringBuilder("Kotlin?")
>>> sb.lastChar = '!'
>>> println(sb)
Kotlin!
```

## 컬렉션 처리: 가변 길이 인자, 중위 함수 호출, 라이브러리 지원

- `vararg` 키워드를 사용하면 함수의 인자 개수에 관계없이 호출 가능한 함수를 정의할 수 있다.
- 중위`ìnfix` 함수 호출 구문을 사용하면 인자가 하나뿐인 메소드를 편하게 호출 할 수 있다. 

- 구조 분해 선언`destructuring declaration`을 사용하면 복합적인 값을 분해해서 여러 변수에 나눠 담을 수 있다.

### 자바 컬렉션 API 확장

```kotlin
val strings: List<String> = listOf("first", "second", "fourteenth")
>>> strings.last()
fourteenth
>>> val numbers: Collection<Int> = setOf(1, 14, 2)
>>> numbers.max()
14
```

- 위 코드에서 `last`와 `max`는, 자바에는 없는, 코틀린에서 Java 컬렉션에 추가한 `확장 함수`이다.

###  가변 인자 함수: 인자의 개수가 달라질 수 있는 함수 정의

- 리스트를 생성하는 코드를 보면 함수를 호출할 때 매개변수의 개수가 일정하지 않다.

```kotlin
val list = listOf(2, 3, 5, 7, 11)
```

- 라이브러리에서 이 함수의 정의를 보면 아래와 같다.

```kotlin
fun listOf<T>(vararg values: T): List<T> { ... }
```

- 코틀린에서는 가변 길이 인자vararg를 생성할 때는 `vararg` 키워드를 붙이면 매개변수는 개수에 관계 없이 인자를 받을 수 있다. 자바의 경우 타입 뒤에 `...`을 붙인다.
- 가변 길이 인자에 배열을 넣는 경우 자바에서는 배열을 그냥 넘기면 되지만, 코틀린에서는 배열을 명시적으로 풀어 전달해야 하며, 이를 가능하게 해주는 **스프레드spread 연산자** 사용하면 된다.

```kotlin
fun main(args: Array<String>) {
    val list = listOf("args: ", *args)
    println(list)
}
```

###  값의 쌍 다루기: 구조 분해 선언

- 구조 분해 선언destructuring declaration을 사용하면, 아래 예제와 같이 index와 value를 동시에 변수에 담을 수 있다.

```kotlin
for ((index, element) in collection.withIndex()) {
    println("${index}: ${element}")
}
```

##  로컬 함수와 확장

- 자바에서 DRY 지키기 어려움. 중복 피하기 위해 리팩토링 진행 하다보면 메소드가 작고 많아져 이해하기 어려워 질수 있다. 내부 함수로 해결 할 수 있음
- 코틀린에서는 함수를 함수 내부에 중첩시킬 수 있다. 이를 로컬 함수라고 부르며, 코드 중복을 제거하는데 유용하게 쓰인다.

```kotlin
/* 코드 중복을 보여주는 예 */

class User(val id:Int, val name: String, val address: String)

fun saveUser(user: User) {

    if(user.name.isEmpty()) {    /* 필드 검증이 중복 된다. */
        throw IllegalArgumentException("Can't save user ${user.id}: empty Name") 
    }
    
    if(user.address.isEmpty()) {    /* 필드 검증이 중복 된다. */
        throw IllegalArgumentException("Can't save user ${user.id}: empty Address")
    }
    
    ...
}

>>> saveUser(User(1, "", ""))
java.lang.IllegalArgumentException: Can't save user 1: empty Name
```

- 위 코드를 로컬 함수로 변경하면 중복을 없애는 동시에 코드 구조를 깔끔하게 유지할 수 있다.

```kotlin
/* 로컬 함수를 사용해 코드 중복 줄이기 */

class User(val id:Int, val name: String, val address: String)

fun saveUser(user: User) {
    fun validate(value: String, fieldName: String) {  /* 필드 검증하는 로컬 함수를 선언 */
        if(value.isEmpty()) {
            throw IllegalArgumentException(
                "Can't save user ${user.id}: "  /* 바깥 함수의 파라미터(user)에 직접 접근 가능하다. */
                 +"empty ${fieldName}")
        }
    }

    validate(user.name, "Name")    
    validate(user.address, "Address")    
    ...
}
```

- 위 예제를 좀 더 개선하고 싶은 경우 `validate`함수를 User 클래스의 확장 함수로 만들 수도 있다.

```kotlin
/* 검증 로직을 확장 함수로 추출하기 */

class User(val id:Int, val name: String, val address: String)

fun User.validateBeforeSave() {
    fun validate(value: String, fieldName: String) {
        if(value.isEmpty()) {
            throw IllegalArgumentException(
                "Can't save user ${id}: empty ${fieldName}") /* User의 프로퍼티를 직접 사용할 수 있다. */ 
        }
    }

    validate(user.name, "Name")    
    validate(user.address, "Address")    
}

fun saveUser(user: User) {
    user.validateBeforeSave()  /* 확장 함수 호출 */
    ...
}
```