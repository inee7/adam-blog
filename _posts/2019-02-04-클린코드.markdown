---
layout: post
title: 클린코드 정리
img: clean_code.jpg
tags: 클린코드 로버트C마틴
---

# 깨끗한 코드
모델이나 요구사항에 집중해야한다고 하는 사람이 있다. 하지만 코드의 도움 없이 요구사항을 표현하기란 불가능이라 주장.
나쁜코드는 생산성을 떨어뜨린다.
나쁜 코드의 위험을 이해하지 못하는 관리자 말을 그대로 따르는 행동은 전문가답지 못하다.
중복을 피하라. 한가지 기능만 수행하라. 제대로 표현하라. 작게 추상화하라.

# 의미있는 이름
- 발음하기 쉬운 이름을 선택하라. 동료간의 소통할 때 필요한듯.
- 접두어에 의존하지 않은 좋은 IDE를 쓰자. 접두어를 써서 옛날에 작성한 구닥다리 코드라는 징표를 남기지 말자.
- 인터페이스에 이름은 접두어를 붙이지 않는 편이 좋다. 접두어는 주의를 흐트리고 과도한 정보를 제공.
- 클래스 이름은 명사나 명사구. Manager, Processor, Data, Info 등은 피해라.
- 메서드 이름은 동사나 동사구. 접근사(get),변경자(set),조건자(is)
- 생성자 오버로딩이 필요할때는 정적 팩토리 메서드로 인수를 설명하는 이름을 사용.
- 특정문화에서만 사용하는 이름은 피하라.
- 한 개념에 한 단어를 쓰자. get, fetch 혼용하지 말고 controller, Manager 혼용하지 말라.
- 맥락이 다르면 다른 이름을 써야한다. add로 합하는 메서드가 있는데 집합에 추가하는 메서드에 add를 쓰면 안된다. insert나 append를 써야한다. **메서드에 의미를 밝혀라. 메서드를 해독할 일이 생기면 안된다.**
- 코드를 읽을 사람은 프로그래머이기에 기술 네이밍 적극 사용해야한다. 도메인 이름보다는 기술 이름이 더욱 적합할 수 있다.
- 적절한 기술 용어가 없다면 도메인 네이밍을 써라.
- 메서드안에서 쓰는 변수가 메서드 전반에서 쓰이는데 의미가 불분명하다면 클래스로 분리해서 클래스안의 변수의 맥락을 분명하게 만들어라.
- 불필요한 맥락을 없애라. Gas Station Deluxe 라는 애플리케이션 짠다고 GSD로 시작하는 클래스로 만들면 바람직하지 못하다.

# 함수
- 작게 만들어라. 작게 만들고 if,while문에 들어가는 블록은 한줄로 만들어라.
- 함수는 **한가지**를 해야한다. 그 **한가지**를 잘해야한다. 그 **한가지**만을 해야한다. (추상화 수준이 하나인 단계)
- 함수가 확실히 '한가지' 작업만 하려면 함 수 내 모든 문장의 추상화 수준이 동일 해야한다.
- 위에서 아래로 코드를 이야기 처럼 읽히면 좋다. 함수 안에 호출되는 함수들은 더 낮은 추상화를 가지게 된다.
- switch문은 작게 만들기 어렵다. 하지만 각 switch문을 저차원 클래스에 숨기고 절대로 반복하지 않는 방법은 있다.

```java
public Money calculatePay(Employee e) throws InvalidEmployeeType{
  switch(e.type) {
    case COMMISSIONED :
      return calculateCommissionedPay(e);
    case HOURLY :
      return calculateHourlyPay(e);
    ...
    default:
      throw new InvalidEmployeeType(e.type);
  }
}
```

함수가 길다. 새직원 추가 될때 마다 길어지고 한가지 작업만 수행하지 않는다. (커미션직원, 시간직원등에 대한 작업), 코드를 변경할 이유가 많다. (SRP위반), 새 직원 생길때 마다 변경되야한다. (OCP위반)
가장 심각한건 isPayDay나 deliverPay같이 비슷한 코드가 여럿 발생 할 수 있다는 것이다.
이를 해결하기 위해 switch문을 추상팩토리에 꽁꽁 숨긴다. 팩토리는 switch문으로 적절한 Employee 파생 클래스를 만들어낸다. 이제 calculatePay,isPayDay,deliverPay같은 함수는 Employee인터페이스를 통해 실행된다.

```java

public abstract class Employee {
  public abstract boolean isPayDay();
  public abstract Money calculatePay();
  public abstract void deliverPay(Money money);
}

public interface EmployeeFactory {
  public Employee makeEmployee( EmployeeRecord r) throws InvalidEmployeeType;
}

public class EmployeeFactoryImpl implements EmployeeFactory {
  public Employee makeEmployee(EmployeeRecord r)throws InvalidEmployeeType {
    switch (r.type) {
      case COMMISSIONED:
        return new CommissionedEmployee(r);
      case HOURLY:
        return new HourlyEmployee(r);
      case SALARIED:
      ...

    }
  }
}

```


- 서술적인 이름을 써라.
- 함수 인자는 최소화 하는게 좋다.
0개가 제일 좋다.
1개 인수를 쓰는 이유는 fileExists("MyFile") 이나 타입을 변형시켜주는 경우가 제일 흔하다.
플래그로 함수를 구분시키는건 좋지 못하다. 함수가 여러가지 일을 처리한다고 대놓고 공표하는 셈이다.
2개 인수이면 1개 인수보다 이해하기 어렵다. 가능하면 1개를 써라.
함수의 의도나 인수의 순서와 의도를 제대로 표현하려면 좋은 함수 이름이 필요하다. 함수 이름에 인수 이름을 넣으면 좀더 이해하기 쉽다.
- 함수에서 한가지를 하겠다고 약속하고선 남몰래 다른 짓을 하는 경우는 안된다. 한가지 일을 하지 않지만 이름이라도 잘 나타내야한다. checkPassword->checkPasswordAndInitializeSession
- 함수 선언부를 찾아보는 행위는 코드를 거슬리는 행위다. 따라서 함수를 보고 출력인수인지 아닌지 확인이 가능해야한다. void appendFooter(StringBuffer report) 객체지향을 하면서 출력인수는 필요없어졌다. this가 있기 때문에. report.appendFooter()하면 된다. 일반적으로 출력인수는 피해야한다. 함수에서 상태를 변경해야 한다면 함수가 속한 객체 상태를 변경하는 방식을 택한다.
- 함수는 뭔가를 수행하거나 뭔가에 답하거나 둘 중 하나만 해야한다.
boolean set(String attribute, String value)에서 attribute인 속성을 찾아 값을 value로 설정한 후 성공하면 true이다. 그래서 if(set("username", "unclebb")..라는 괴상한 코드가 나온다.
set이 동사인지 형용사인지 구분하기 어렵다. if로 볼때는 형용사로 유추한다면 username속성이 unclebb로 설정되어 있다면 .. 으로 읽힌다. 사실은 username을 unclebob으로 설정하는데 성공하면 .. 인데.. 따라서 if(attributeExists("username")) {setAttribute("username","unclebob")} 이 맞다.
- 오류코드보다 예외를 사용하라.
if(deletePage(page) == E_OK){if()if()...  } 오류코드쓰면 if절 지저분. 예외면 try-catch로 깔끔.
다만 try-catch에서 메소드 추출해주면 정상 동작과 오류처리는 분리해서 깔끔해진다.
try{ deletePageAndAllReferences(page)} catch(Exception e){logError(e)}
오류코드를 반환하면 어디선가 오류코드 정의 했다는 말인데 의존성 자석이다. 오류코드가 변하면 의존하는 모든 클래스 다시 컴파일 해야한다. 예외를 사용하면 새 예외는 Exception클래스에서 파생된다. 컴파일/재배치 없이도 새 예외 클래스 추가 할 수 있다. (ocp의 예)
- 반복하지 마라! 중복코드 최대한 없애라. 객체지향프로그래밍,구조적프로그래밍,AOP,COP 모두 중복 제거 전략이 있다.  

# 객체와 자료구조
- 변수를 감추고 getter,setter 무작정 만들기 보다는 추상화해라.
- 객체와 자료구조는 양분된다.
절차적인 코드는 기존 자료구조를 변경하지 않으면서 새 함수를 추가하기 쉽다. 함수는 분리되어있기 때문에. 반면, 객체지향코드는 기존함수를 변경하지 않으면서 새클래스를 추가하기 쉽다. 클래스 안에 함수가 있기 때문에
절차적인 코드는 새로운 자료구조를 추가하기 어렵다. 그러려면 모든 함수를 고쳐야한다. 객체지향 코드는 새로운 함수를 추가하기 어렵다. 그러려면 모든 클래스를 고쳐야한다.
즉, 객체지향코드에서 어려운 변경은 절차적인 코드에서 쉽고 그반대도 해당된다.
- 디미터법칙: 모듈은 자신이 조작하는 객체의 속사정을 몰라야 한다는 법칙.
객체는 자료를 숨기고 함수를 공개한다.
좀 더 정확히 표현하면 디미터법칙은 "클래스C의 메서드f는
클래스C,
f가 생성한 객체,
f인수로 넘어온 객체,
c인스턴스변수에 저장된 객체
만 호출해야한다."
- 시스템을 구현할 때 새로운 자료 타입을 추가하는 유연성이 필요하면 객체가 더 적합하고 새로운 동작을 추가하는 유연성이 필요하면 자료 구조와 절차적인 코드가 더 적합하다.  




# 오류코드 

## 오류코드보다 예외를 사용해라 

## Try-catch-finally 문부터 작성 

- try는 트랜잭션과 비슷해서 일관성 유지 시켜줌. 따라서 예외가 발생할 코드를 짤 때는 try로 시작하는게 낫다 
- 먼저 강제로 예외를 일으키는 테스트케이스를 작성한 후 테스트를 통과하게 코드를 작성하는법을 권장 

## Unchecked Exception 을 써라 

- checked exception이 안정적일거라 예상했지만 현재 checked exception 없어도 안정적임에 무리가 없다. 그러므로 우리는 checked exception의 비용에 대해 따져봐야한다. 
- checked exception는 OCP를 위반한다. 하위클래스의 익셉션이 최상위 클래스까지 알아야해서 캡슐화가 깨진다. 

## 예외에 의미를 제공 

- 오류 메시지에 정보를 담아 예외와 함께 던져라 

## 호출자를 고려해 예외 클래스를 정의하라 

- 오류를 정의할 때 프로그래머에게 가장 중요한 관심사는 오류를 잡아내는 방법이 되어야한다. 
- 외부 라이브러리의 여러 예외를 처리하는게 중복 된다면 레퍼클래스로 감싸서 하나의 익셉션으로만 발생하게 만들면 된다. 
- 예외상황에 특수처리를 한다면 특수사례패턴처럼 클래스를 상속해서 예외상황에 맞는 클래스를 반환해 특수 처리 할수 있게 한다.  

## null을 반환하지 마라 

## null을 인자로 전달하지 마라 

