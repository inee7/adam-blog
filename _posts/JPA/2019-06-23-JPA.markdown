---
layout: post
title: JPA Study
img: jpa.png
tags: spring jpa 
---

# JPA

database와 OOP 패러다임 불일치를 해결하기 위해 ORM

그밖에 생산성, 유지보수, 단순쿼리 날리는것보다 재활용을 할 수 있는 프레임워크라 성능도 장점, 벤더 독립성 

2014년 6월 전세계 JPA+Hibernate : 94% 쓰고 있음 

```kotlin
@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)
```

IDENTITY하면 데이터베이스에 키 생성 위임 

### EntityManagerFactory란

데이터베이스를 하나만 사용하는 애플리케이션들은 일반적으로 EntityManagerFactory를 **한개만** 생성한다. 이 엔터티 매니저 팩토리로 엔터티 매니저를 생성할 수 있다. EntityManagerFactory는 Thread Safe해서 여러 스레드가 동시에 접근해도 안전하므로 서로 다른 스레드간에 공유해 사용한다.

데이터베이스 연동하고 커텍션 풀도 생성하고 그래서 생성 비용이 매우 큼

#### EntityManagerFactory 정리

- Hibernate에서는 SessionFactory(EntityManagerFactory)
- 엔티티 매니저 팩토리는 여러 스레드가 동시에 접근해도 안전하다.(thread-safe)
- EntityManager를 생성한다.

### EntityManager란

엔터티 매니저는 엔터티를 저장하는 메모리상의 데이터베이스라고 생각하면 될 것같다. 엔터티 매니저는 엔터티를 저장하고 수정하고 삭제하고 조회하는 등 엔터티와 관련된 모든일을 한다. 하지만 위의 EntityManagerFactory는 달리 Thread Safe하지 않기때문에 동시성 문제가 발생하므로 스레드간에 절대 공유하면 안 된다. 그래서 일반적으로 EntityManager를 EntityManagerFactory를 이용하여 생성한것을 사용하는것이 아닌 스프링에서 관리하는 EntityManager를 아래와 같이 선언하여 사용한다. 이렇게되면 스프링에서 알아서 EntityManager를 Proxy로 깜싼 EntityManager를 생성 하여 주입해주기 때문에 Thread-Safety를 보장 한다.

```
@PersistenceContext
private EntityManager entityManager;
```

#### EntityManager 정리

- Hibernate에서는 Session(EntityManager)으로 불리운다.
- 엔티티 매니저는 여러 스레드가 동시에 접근하면 동시성 문제가 발생하므로 스레드 간에 절대 공유하면 안된다.
- 생성 비용 거의 들지 않음.
- 요청에 의해 엔티티매니저가 생성되면 트랜잭션을 시작할때 커넥션풀에서 데이터베이스 연결을 한다.  

### PersistenceContext(영속성 컨텍스트)란

- 영속성 컨텍스트란 엔티티(Entity)를 영구 저장 하는 환경을 말한다. 엔티티 매니저로 엔티티를 저장하거나 조회하면 엔티티 매니저는 영속성 컨텍스트에 엔티티를 보관하고 관리한다.
- 영속성 컨텍스트는 **엔티티매니저(Session)를 생성할 때 하나 만들어진다.** 그리고 엔티티 매니저(Session)를 통해서 영속성 컨텍스트에 접근할 수 있고 영속성 컨텍스트를 관리 할 수 있다.
- 여러 엔티티 매니저(Session)가 같은 영속성 컨텍스트에 접근할 수도 있다.



### 엔티티 생명주기 

- 비영속(new/transient) : 영속성 컨텍스트와 전혀 관계 없음 
- 영속(merged): 컨텍스트에 저장됨
- 준영속(detached): 컨텍스트에 저장되었다가 분리됨 
- 삭제(removed): 삭제된 상태



#### persist

entityManager -> 1차캐시 : 저장
entityManager -> 쓰기 지연 SQL 저장소 : INSERT SQL 생성

#### commit 

쓰기 지연 SQL 저장소 -> DB : SQL 전달

#### entity객체 변경 후 flush

영속화 될때 스냅샷하여 flush 된 객체와 비교해서 차이를 update sql 만들어 쓰기 지연 SQL에서 DB에 보낸다. DB 커밋 되면서 반영 

#### 엔티티 삭제 

마찬가지로 쓰기 지연 SQL 저장소에 등록되고 플러시 해야 DB 커밋 된다. 

준영속화가 되므로 가비지 컬렉션 대상이 되어야 한다. 

JPQL 실행시 자동으로 플러시 

식별자를 기준으로 조회하는 find()메소드는 실행되지 않음 

### @Entity

- 기본 생성자 필수 
- final, enum, interface, inner 클래스 불가 
- 필드 final 불가
- enum 사용하려면 @Enumerated
- 자바의 날짜 타입 (Date..)는 @Temporal 
- 길이 제한 없는 String @Lob
- DDL 자동생성 
  - hibernate.hbm2ddl.auto 
    - create 삭제 후 생성
    - create-drop 삭제 후 생성 종료할때 삭제 
    - update 비교해서 변경 
    - validate 차이 있으면 경고하고 애플리케이션 실행 X 
  - 운영 서버에서는 절대 자동 DDL 하면 안됨. 
  - 개발 초기 create
  - Local, CI서버에는 create, create-drop
  - 테스트 서버는 update, validate
  - 스테이징이나 운영서버는 validate이거나 hibernate.hbm2ddl.auto 삭제



## 연관관계 

### 다대일

default fetch type 은 Eager

### 일대다 

default fetch type 은 lazy  

글로벌 페치 전략

- @OneToOne, @ManyToOne : **EAGER**
- @OneToMany, @ManyToMany : **LAZY**

<u>*다대일이나 일대일이라도 lazy를 쓰고 JPQL에서 fetch join을 통해 한번에 조인 할 수 있게 하자.*</u> 



**일대다 단방향보단 다대일 양방향**

@OneToMany(mappedBy="필드명")는 양방향 매핑일 때 사용 -> 반대쪽 매핑의 필드값을 넣어주면됨

다 쪽이 항상 외래키를 가지므로 OneToMany만 mappedBy가짐

@JoinColunm은 주인인 외래키를 지정하는것. name으로 외래키 이름 정해주고 foreignKey해주면 자동 DDL 할때 외래키 제약조건 걸 수 있다. 

주인이 아니면 read-only 

양방향은 양 객체 둘다 서로 맞춰서 주의하여 구현 되도록 해야한다...



JPA는 트랜잭션 안에서 데이터 변경해야하는데 그렇게 않으면 예외 발생 한다. 

SQL은 대소문자 구문안하지만 JPQL은 대소문자 구분 

Spring-Data-JPA 는 JPA 쉽게 쓸 수 있게 간단 작업 

QueryDSL은 JPQL대신 사용하기 좋은 복잡한 검색에 씀 - 동적 쿼리와 타입 체크와 객체지향이 장점 

queryDSL에서 selectFrom 은  Select와 From 합쳐 놓은것 

Spring-Data-Jpa에서 쿼리 메소드 _ 써서 외래키 접근 하면 되는데 조인을 하게 된다. 그래서 조인 안 하려면 QueryDSL 쓰는게 좋은듯 . 



요청하는 쓰레드마다 자기의 트랜젝션가지고 트랜잭션마다 영속성컨텍트를 가진다 

OSIV는 영속성 컨텍스트를 controller까지 생존 시켜서 지연 로딩 가능하게 하는것 

 

