---
layout: post
title: null체크보다 건강한것은...
img: null.jpg
tags: java


---

> 1965년 토이호어가 알골을 설계하면서 처음 null 레퍼런스가 등장. 그는 "구현하기 쉬웠기 때문에 null을 도입했다"라고 당시를 회상.

> 여러 해가 지난 후 호어는 당시 null 및 예외를 만든 결정을 가리켜 "억만 달러짜리 실수"라고 표현.

				
습관적인 null 체크는 지양하자 
불필요한 곳에 null 체크 구문을 넣으면, 
다른 사람이 그 코드를 볼 때 생각이 많아지고 또 다른 곳에 불필요한 확인 코드를 작성하게 된다. 
모든 변수가 null인지 의심할 수 있으므로 변수를 접근할 때 마다 if가 추가되면서 코드 양 증가 우려.
* 이와 같은 반복 패턴 코드를 "깊은 의심"이라 부름.

혹은 논리적으로 발생하면 안 되는 상황에서의 null값을 예외처리를 통해 우회하는 것은 더욱 찾기 힘든 잠재적 버그를 만든다. 
이보다는 개발과정에서 근본적인 문제를 해결하는게 바람직하다. 

다른 언어는 null 대신 무엇을 사용?
			- 최근 그루비 같은 언어에서는 안전 내비게이션 연산자(?.)를 도입해 null 문제 해결.
			- 하스켈, 스칼라 등의 함수형 언어는 아예 다른 관점에서 null 문제에 접근.
			- 하스켈은 선택형 값을 저장할 수 있는 MayBe라는 형식 제공.
				> MayBe는 주어진 형식의 값을 갖거나 아니면 아무 값도 갖지 않을 수 있음.
					* 따라서 null 레퍼런스 개념이 자연스럽게 사라짐.
			- 스칼라도 T 형식의 값을 갖거나 아무 값도 갖지 않을 수 있는 Option[T]라는 구조 제공.
				> Option형식에서 제공하는 연산을 사용해서 값이 있는지 여부를 명시적으로 확인.
					* 즉, null 확인
				> 형식 시스템에서 이를 강제하므로 null과 관련한 문제가 일어날 가능성이 줄어듦.
			- 자바8은 "선택형값" 개념의 영향을 받아 java.util.Optional<T>라는 새로운 클래스 제공.


JavaDoc 이나 Optional(T)**을 활용하여 직관적인 프로그래밍을 하자** 

설계단계부터 깊은 고민을 하고 Java Doc, Optional(T) 을 활용한 Transparency (투명성) 한 프로그래밍을 한다면 근본적인 문제를 사전에 방지하고 해결안을 찾을 수 있을 것이다 

다시 한번 강조하지만 위험요소와 제약사항을 인지하고 있는 상황이라면 프로그래밍 실수의 상당부분을 줄일 수 있다 

예외와 Optional
- 자바 API는 어떤 이유에서 값을 제공할 수 없을 때 null을 반환하는 대신 예외를 발생시킬 때도 존재.
- 전형적인 예로 문자열을 정수로 변환하는 Integer.parseIng(String) 정적 메서드임.
	- 문자열을 정수로 바꾸지 못할 때 NumberFormatException 발생.
	- 즉, 문자열이 숫자가 아니라는 사실을 예외로 알리는 것.
- 정수를 변환할 수 없느 문자열 문제를 빈 Optional로 해결 가능.
	- 즉, parseInt가 Optional을 반환하도록 모델링 가능.

```java
public static Optional<Integer> stringToInt(String s) {
        try {
            return Optional.of(Interger.parseInt(s));   //문자열을 정수로 변환가능 시 변환된 정수 값을 포함한 Optional 반환.
        } catch(NumberFormatException ex) {
            return Optional.empty();    //에러 발생 시 빈 Optional을 반환.
        }
}
```
